import pandas as pd
import numpy as np
from scipy.stats import ttest_ind


# # Assignment 4 - Hypothesis Testing
# This assignment requires more individual learning than previous assignments - you are encouraged to check out the [pandas documentation](http://pandas.pydata.org/pandas-docs/stable/) to find functions or methods you might not have used yet, or ask questions on [Stack Overflow](http://stackoverflow.com/) and tag them as pandas and python related. And of course, the discussion forums are open for interaction with your peers and the course staff.
# 
# Definitions:
# * A _quarter_ is a specific three month period, Q1 is January through March, Q2 is April through June, Q3 is July through September, Q4 is October through December.
# * A _recession_ is defined as starting with two consecutive quarters of GDP decline, and ending with two consecutive quarters of GDP growth.
# * A _recession bottom_ is the quarter within a recession which had the lowest GDP.
# * A _university town_ is a city which has a high percentage of university students compared to the total population of the city.
# 
# **Hypothesis**: University towns have their mean housing prices less effected by recessions. Run a t-test to compare the ratio of the mean price of houses in university towns the quarter before the recession starts compared to the recession bottom. (`price_ratio=quarter_before_recession/recession_bottom`)
# 
# The following data files are available for this assignment:
# * From the [Zillow research data site](http://www.zillow.com/research/data/) there is housing data for the United States. In particular the datafile for [all homes at a city level](http://files.zillowstatic.com/research/public/City/City_Zhvi_AllHomes.csv), ```City_Zhvi_AllHomes.csv```, has median home sale prices at a fine grained level.
# * From the Wikipedia page on college towns is a list of [university towns in the United States](https://en.wikipedia.org/wiki/List_of_college_towns#College_towns_in_the_United_States) which has been copy and pasted into the file ```university_towns.txt```.
# * From Bureau of Economic Analysis, US Department of Commerce, the [GDP over time](http://www.bea.gov/national/index.htm#gdp) of the United States in current dollars (use the chained value in 2009 dollars), in quarterly intervals, in the file ```gdplev.xls```. For this assignment, only look at GDP data from the first quarter of 2000 onward.
# 
# Each function in this assignment below is worth 10%, with the exception of ```run_ttest()```, which is worth 50%.

# In[10]:


# Use this dictionary to map state names to two letter acronyms
states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}


# In[ ]:





# In[49]:


def replaceer(x):
    for char in x:
        if char =='(':
            y = x.split('(')
            x = y[0]
        elif char == '[':
            y = x.split('[')
            x = y[0]
    return x

def delete_states(x):
    if x in states.values():
        x = np.NaN
    return x

def get_list_of_university_towns():
    #'''Returns a DataFrame of towns and the states they are in from the 
    #university_towns.txt list. The format of the DataFrame should be:
    #DataFrame( [ ["Michigan", "Ann Arbor"], ["Michigan", "Yipsilanti"] ], 
    #columns=["State", "RegionName"]  )
    #
    #The following cleaning needs to be done:
    #
    #1. For "State", removing characters from "[" to the end.
    #2. For "RegionName", when applicable, removing every character from " (" to the end.
    #3. Depending on how you read the data, you may need to remove newline character '\n'. '''
    
    df = pd.read_csv('university_towns.txt', header = None, sep = '\n', names = ['RegionName'])
    df['RegionName'] = df['RegionName'].apply(replaceer)
    state = states.values()
    
    templist = []
    tempstate = ''
    for city in df['RegionName']:
        if city in state:
            tempstate = city
        else:
            templist.append(tempstate)
    
    df['RegionName'] = df['RegionName'].apply(delete_states)
    df = df.dropna()
    
    for city in df['RegionName']:
        if ' ' in city:
            newcity = city.replace(' ', '')
            df['RegionName'] = df['RegionName'].replace(city, newcity)

    df['State'] = templist
    cols = ['State', 'RegionName']
    df = df[cols]
    
    return df

get_list_of_university_towns()


# In[61]:


def get_recession_start():
    #'''Returns the year and quarter of the recession start time as a 
    #string value in a format such as 2005q3'''
    
    df = pd.read_excel('gdplev.xls', skiprows = 220, usecols = [4,6], header = None, names = ['Q', 'GDP'])
    df['diff'] = df['GDP'].diff()
    rec_start = ''
    
    for x in range(df['diff'].size):
        if x >= 1:
            if df['diff'][x] < 0:
                if df['diff'][x - 1] < 0:
                    rec_start = df['Q'][x - 1]
                    break
     
    return rec_start

get_recession_start()


# In[62]:


def get_recession_end():
    #'''Returns the year and quarter of the recession end time as a 
    #string value in a format such as 2005q3''' 
    
    df = pd.read_excel('gdplev.xls', skiprows = 220, usecols = [4,6], header = None, names = ['Q', 'GDP'])
    df['diff'] = df['GDP'].diff()
    rec_end = ''
    rec_start = get_recession_start()
    rec_start_num = df.where(df['Q']==rec_start).dropna().index[0]
    
    for x in range(rec_start_num, df['diff'].size):
        if x >= 1:
            if df['diff'][x] > 0:
                if df['diff'][x - 1] > 0:
                    rec_end = df['Q'][x]
                    break
     
    return rec_end

get_recession_end()    


# In[14]:


def get_recession_bottom():
    #'''Returns the year and quarter of the recession bottom time as a 
    #string value in a format such as 2005q3'''
    
    df = pd.read_excel('gdplev.xls', skiprows = 220, usecols = [4,6], header = None, names = ['Q', 'GDP'])
    df['diff'] = df['GDP'].diff()
    
    rec_start = get_recession_start()
    rec_end = get_recession_end()
    rec_start_num = df.where(df['Q']==rec_start).dropna().index[0]
    rec_end_num = df.where(df['Q']==rec_end).dropna().index[0]
    min_gdp = df['GDP'][rec_start_num]
    
    for x in range (rec_start_num, rec_end_num):
        if df['GDP'][x] < min_gdp:
            min_gdp = df['GDP'][x]
            rec_bottom = df['Q'][x]
        
    return rec_bottom

get_recession_bottom()


# In[15]:


def convert_housing_data_to_quarters():
    #'''Converts the housing data to quarters and returns it as mean 
    #values in a dataframe. This dataframe should be a dataframe with
    #columns for 2000q1 through 2016q3, and should have a multi-index
    #in the shape of ["State","RegionName"].
    
    #Note: Quarters are defined in the assignment description, they are
    #not arbitrary three month periods.
    
    #The resulting dataframe should have 67 columns, and 10,730 rows.
    #'''
    
    dff = pd.read_excel('gdplev.xls', skiprows = 220, usecols = [4,6], header = None, names = ['Q', 'GDP']) 
    
    df = pd.read_csv('City_Zhvi_AllHomes.csv')
    df = df.replace(states)
    df = df.set_index(['State', 'RegionName'])
    dff = df.drop(df.iloc[:, 4:], axis = 1)
    df = df.drop(df.iloc[:, :49], axis = 1)

    
    for col in df.columns:
        if col[4:] == '-01' or col[4:] == '-02' or col[4:] == '-03':
            df.rename(columns={col: col[:4] + 'q1'}, inplace=True)
        if col[4:] == '-04' or col[4:] == '-05' or col[4:] == '-06':
            df.rename(columns={col: col[:4] + 'q2'}, inplace=True)
        if col[4:] == '-07' or col[4:] == '-08' or col[4:] == '-09':
            df.rename(columns={col: col[:4] + 'q3'}, inplace=True)
        if col[4:] == '-10' or col[4:] == '-11' or col[4:] == '-12':
            df.rename(columns={col: col[:4] + 'q4'}, inplace=True)
    
    df = df.T
    
    df = df.groupby(level = 0).mean()
    df = df.T
    
    return df

convert_housing_data_to_quarters()


# In[60]:


def run_ttest():
    #'''First creates new data showing the decline or growth of housing prices
    #between the recession start and the recession bottom. Then runs a ttest
    #comparing the university town values to the non-university towns values, 
    #return whether the alternative hypothesis (that the two groups are the same)
    #is true or not as well as the p-value of the confidence. 
    
    #Return the tuple (different, p, better) where different=True if the t-test is
    #True at a p<0.01 (we reject the null hypothesis), or different=False if 
    #otherwise (we cannot reject the null hypothesis). The variable p should
    #be equal to the exact p value returned from scipy.stats.ttest_ind(). The
    #value for better should be either "university town" or "non-university town"
    #depending on which has a lower mean price ratio (which is equivilent to a
    #reduced market loss).'''
    
    df = convert_housing_data_to_quarters()
    
    rec_start = get_recession_start()
    rec_bottom = get_recession_bottom()
    
    df['Ratio'] = df[rec_start]/df[rec_bottom]
    
    uni_towns = get_list_of_university_towns()
    
    uni = pd.merge(df, uni_towns, left_index=True, right_on=['State','RegionName'], how='inner')
    non_uni = pd.merge(df, uni_towns, left_index=True, right_on=['State', 'RegionName'], how='left', indicator=True)
    
    non_uni = non_uni[non_uni['_merge']=='left_only'].drop('_merge', axis=1)
    
    mean_ratio_uni = uni['Ratio'].mean()
    
    mean_ratio_non_uni = non_uni['Ratio'].mean()
    
    t,p= ttest_ind(uni['Ratio'], non_uni['Ratio'],nan_policy ='omit',equal_var = False)
    
    better = ''
    if mean_ratio_uni < mean_ratio_non_uni:
        better = "university town"
    else:
        better = "non-university town"
    
    different = False
    if abs(t) > 1:
        different = True

    return (different, p, better)

run_ttest()
